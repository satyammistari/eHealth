
import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";

export interface PrescriptionData {
  patientName: string;
  patientId: string;
  date: string;
  diagnosis: string;
  medications: {
    name: string;
    dosage: string;
    frequency: string;
    duration: string;
  }[];
  instructions: string;
  doctorName: string;
  doctorSpecialty: string;
  hospitalName?: string;
}

export const generatePrescriptionPDF = (data: PrescriptionData): string => {
  const doc = new jsPDF();
  
  // Add hospital/clinic header
  doc.setFontSize(20);
  doc.setTextColor(0, 128, 128);
  doc.text("eHealthWave Medical Center", 105, 20, { align: "center" });
  
  doc.setFontSize(12);
  doc.setTextColor(100, 100, 100);
  doc.text("Healthcare for the Digital Age", 105, 28, { align: "center" });
  doc.text("Contact: +91 8010599511", 105, 34, { align: "center" });
  
  // Add line separator
  doc.setDrawColor(0, 128, 128);
  doc.setLineWidth(0.5);
  doc.line(20, 40, 190, 40);
  
  // Prescription title
  doc.setFontSize(16);
  doc.setTextColor(0, 0, 0);
  doc.text("PRESCRIPTION", 105, 50, { align: "center" });
  
  // Patient and doctor info
  doc.setFontSize(12);
  doc.text(`Patient: ${data.patientName}`, 20, 65);
  doc.text(`Patient ID: ${data.patientId}`, 20, 72);
  doc.text(`Date: ${data.date}`, 140, 65);
  doc.text(`Doctor: Dr. ${data.doctorName}`, 140, 72);
  doc.text(`Specialty: ${data.doctorSpecialty}`, 140, 79);
  
  // Diagnosis
  doc.setFontSize(14);
  doc.text("Diagnosis:", 20, 95);
  doc.setFontSize(12);
  doc.text(data.diagnosis, 30, 103);
  
  // Medications
  doc.setFontSize(14);
  doc.text("Medications:", 20, 120);
  
  const tableColumns = ["Medication", "Dosage", "Frequency", "Duration"];
  const tableRows = data.medications.map(med => [
    med.name,
    med.dosage,
    med.frequency,
    med.duration
  ]);
  
  autoTable(doc, {
    head: [tableColumns],
    body: tableRows,
    startY: 125,
    theme: 'striped',
    styles: { fontSize: 10, cellPadding: 3 },
    headStyles: { fillColor: [0, 128, 128] }
  });
  
  // Instructions
  const finalY = (doc as any).lastAutoTable.finalY + 15;
  doc.setFontSize(14);
  doc.text("Instructions:", 20, finalY);
  doc.setFontSize(12);
  doc.text(data.instructions, 30, finalY + 8);
  
  // Signature
  doc.text("Signature:", 140, finalY + 40);
  doc.setDrawColor(0, 0, 0);
  doc.line(150, finalY + 50, 190, finalY + 50);
  doc.text(`Dr. ${data.doctorName}`, 150, finalY + 58);
  doc.text(`${data.doctorSpecialty}`, 150, finalY + 65);
  
  // Footer
  doc.setFontSize(10);
  doc.setTextColor(100, 100, 100);
  doc.text("This is a digital prescription generated by eHealthWave system.", 105, 280, { align: "center" });
  
  // Save and return as data URL
  const pdfDataUrl = doc.output('datauristring');
  return pdfDataUrl;
};

export const generateMedicalRecordPDF = (recordData: any): string => {
  const doc = new jsPDF();
  
  // Add header
  doc.setFontSize(18);
  doc.setTextColor(0, 75, 125);
  doc.text("eHealthWave Medical Record", 105, 20, { align: "center" });
  
  // Add record ID and date
  doc.setFontSize(12);
  doc.setTextColor(100, 100, 100);
  doc.text(`Record ID: ${recordData.id}`, 20, 35);
  doc.text(`Date: ${recordData.date}`, 140, 35);
  
  // Patient info section
  doc.setFontSize(14);
  doc.setTextColor(0, 0, 0);
  doc.text("Patient Information", 20, 50);
  
  doc.setFontSize(12);
  doc.text(`Name: ${recordData.patientName}`, 25, 60);
  doc.text(`ID: ${recordData.patientId}`, 25, 67);
  
  // Record details
  doc.setFontSize(14);
  doc.text("Record Details", 20, 85);
  
  doc.setFontSize(12);
  doc.text(`Type: ${recordData.recordType}`, 25, 95);
  doc.text(`Title: ${recordData.title}`, 25, 102);
  
  // Description with word wrap
  doc.text("Description:", 25, 115);
  const splitDescription = doc.splitTextToSize(recordData.description, 160);
  doc.text(splitDescription, 25, 122);
  
  let yPosition = 122 + splitDescription.length * 7;
  
  // Add doctor information
  yPosition += 20;
  doc.setFontSize(14);
  doc.text("Healthcare Provider", 20, yPosition);
  
  doc.setFontSize(12);
  doc.text(`Doctor: Dr. ${recordData.doctorName}`, 25, yPosition + 10);
  doc.text(`Specialty: ${recordData.doctorSpecialty}`, 25, yPosition + 17);
  doc.text(`Hospital: ${recordData.hospital || 'eHealthWave Medical Center'}`, 25, yPosition + 24);
  
  // Blockchain verification section
  yPosition += 40;
  doc.setFillColor(240, 240, 255);
  doc.rect(20, yPosition, 170, 30, 'F');
  doc.setTextColor(0, 75, 125);
  doc.setFontSize(12);
  doc.text("Blockchain Verification", 105, yPosition + 10, { align: "center" });
  doc.setFontSize(10);
  doc.text("This medical record is verified and secured on blockchain", 105, yPosition + 20, { align: "center" });
  
  // Footer
  doc.setTextColor(100, 100, 100);
  doc.text("This is an official medical record from the eHealthWave system.", 105, 280, { align: "center" });
  
  // Save and return as data URL
  return doc.output('datauristring');
};
